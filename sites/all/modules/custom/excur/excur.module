<?php
/**
 * @file
 */

define('EXCUR_FRONT_THEME_PATH', drupal_get_path('theme', 'exc_theme'));
define('EXCUR_USER_ROLE_GUIDE_ID', 4);
define('EXCUR_USER_ROLE_GUIDE_NAME', 'Гид');

/**
 * Implements hook
 */
function excur_menu() {
  $items['admin/config/excur'] = array(
    'title' => 'Site settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('excur_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function excur_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panels') {
    return "plugins/$plugin_type";
  }

  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return "plugins/content_types";
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_form_service_node_form_alter(&$form, &$form_state) {
  if (!empty($_GET['guide']) && is_numeric($_GET['guide']) && $guide = user_load($_GET['guide'])) {
    $form['actions']['submit']['#attributes']['class'][] = 'btn';
    $form['field_guide'][LANGUAGE_NONE][0]['target_id']['#value'] = $guide->field_name[LANGUAGE_NONE][0]['safe_value'] . " ($guide->uid)";
    $form['field_guide']['#attributes']['class'][] = 'element-hidden';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_form_main_page_slider_node_form_alter(&$form, &$form_state) {
  if (empty($form['#node']->nid)) {
    $form['title']['#default_value'] = 'Слайдер главной страницы (' . date('d:m:Y') . ')';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_form_user_register_form_alter(&$form, &$form_state) {
  $form['guide'] = array(
    '#type' => 'checkbox',
    '#title' => t('Register as guide'),
    '#default_value' => FALSE,
  );

  $form['actions']['submit']['#attributes']['class'][] = 'btn';
  $form['#submit'][] = 'excur_user_register_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_form_user_login_alter(&$form, &$form_state) {
  $form['actions']['submit']['#attributes']['class'][] = 'btn';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_form_user_pass_alter(&$form, &$form_state) {
  $form['actions']['submit']['#attributes']['class'][] = 'btn';
}

/**
 * Custom submit for user_register_form() form.
 */
function excur_user_register_form_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['guide']) && $form_state['values']['guide']) {
    $form['#user']->roles[EXCUR_USER_ROLE_GUIDE_ID] = EXCUR_USER_ROLE_GUIDE_NAME;
    user_save($form['#user']);
  }
}

/**
 * Settings form for excur site.
 */
function excur_settings_form() {
  $form = array();

  return system_settings_form($form);
}

/**
 * Validate function for 'excur_settings_form' form.
 */
function excur_settings_form_validate(&$form, &$form_state) {

}

/**
 * Validate function for 'excur_settings_form' form.
 */
function excur_settings_form_submit(&$form, &$form_state) {

}

/**
 * Get images of main page slider.
 *
 * @return array.
 */
function excur_main_slider_images() {
  $nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'main_page_slider')
    ->orderBy('nid', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  if ($nid) {
    $node = node_load($nid);
    return $node->field_slider_images[LANGUAGE_NONE];
  }

  return array();
}

/**
 * Get text blocks for main page.
 *
 * @return array.
 */
function excur_main_text_blocks() {
  global $language;

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->join('entity_translation', 'et', 'et.entity_id = n.nid');
  $query->condition('n.type ', 'text_block');
  $query->condition('et.entity_type', 'node');
  $query->condition('et.language', $language->language);
  $nids = $query->execute()->fetchCol();

  if ($nids) {
    foreach ($nids as $nid) {
      $nodes[] = node_load($nid);
    }

    return $nodes;
  }

  return array();
}

/**
 * Get count of service in city.
 *
 * @param int $tid.
 * @return int.
 */
function excur_count_service_by_city($tid) {
  $query = db_select('field_data_field_city', 'fdfc');
  $query->fields('fdfc', array('entity_id'));
  $query->condition('fdfc.field_city_target_id', $tid);
  $query->condition('fdfc.bundle', 'service');
  $count = $query->execute()->rowCount();

  return $count ? $count : 0;
}

/**
 * Build the breadcrumb by current page.
 *
 * @return array.
 */
function excur_get_breadcrumb() {
  if ($node = menu_get_object()) {
    if ($node->type == 'service') {
      $city = taxonomy_term_load($node->field_city[LANGUAGE_NONE][0]['target_id']);
      $country = taxonomy_term_load($city->field_country[LANGUAGE_NONE][0]['target_id']);
      $continent = taxonomy_term_load($country->field_continent[LANGUAGE_NONE][0]['target_id']);

      $breadcrumb[] = l($continent->name, "taxonomy/term/$continent->tid");
      $breadcrumb[] = l($country->name, "taxonomy/term/$country->tid");
      $breadcrumb[] = l($city->name, "taxonomy/term/$city->tid");
      $breadcrumb[] = $node->title;
    }
    else {
      $breadcrumb[] = $node->title;
    }
  }
  elseif ($term = menu_get_object('taxonomy_term', 2)) {
    if ($term->vocabulary_machine_name == 'continent') {
      $breadcrumb[] = $term->name;
    }
    elseif ($term->vocabulary_machine_name == 'country') {
      $continent = taxonomy_term_load($term->field_continent[LANGUAGE_NONE][0]['target_id']);

      $breadcrumb[] = l($continent->name, "taxonomy/term/$continent->tid");
      $breadcrumb[] = $term->name;
    }
    elseif ($term->vocabulary_machine_name == 'city') {
      $country = taxonomy_term_load($term->field_country[LANGUAGE_NONE][0]['target_id']);
      $continent = taxonomy_term_load($country->field_continent[LANGUAGE_NONE][0]['target_id']);

      $breadcrumb[] = l($continent->name, "taxonomy/term/$continent->tid");
      $breadcrumb[] = l($country->name, "taxonomy/term/$country->tid");
      $breadcrumb[] = $term->name;
    }
  }

  if (isset($breadcrumb)) {
    array_unshift($breadcrumb, l(t('Home'), '<front>'));

    return $breadcrumb;
  }

  return array();
}

/**
 * Get most popular cities by country.
 *
 * @param int $tid.
 * @return array.
 */
function excur_popular_cities($tid) {
  global $language;

  $query = db_select('field_data_field_city', 'city');
  $query->fields('city', array('field_city_target_id'));
  $query->join('field_data_field_country', 'country', 'city.field_city_target_id = country.entity_id');
  $query->join('entity_translation', 'et', 'city.field_city_target_id = et.entity_id');
  $query->condition('city.bundle', 'service');
  $query->condition('country.bundle', 'city');
  $query->condition('et.entity_type', 'taxonomy_term');
  $query->condition('et.language', $language->language);
  $query->condition('country.field_country_target_id', $tid);
  $query->groupBy('city.field_city_target_id');
  $query->range(0, 6);

  return $query->execute()->fetchCol();
}

/**
 * Get count of guides by city.
 *
 * @param int $tid.
 * @return array.
 */
function excur_count_guide_by_city($tid) {
  $query = db_select('field_data_field_city', 'city');
  $query->fields('city', array('entity_id'));
  $query->condition('city.field_city_target_id', $tid);
  $query->condition('city.bundle', 'user');
  $count = $query->execute()->rowCount();

  return $count ? $count : 0;
}

/**
 * Get most popular giudes by country.
 *
 * @param int $tid.
 * @return array.
 */
function excur_popular_giudes_in_country($tid) {
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->join('field_data_field_city', 'city', 'u.uid = city.entity_id');
  $query->join('field_data_field_country', 'country', 'city.field_city_target_id = country.entity_id');
  $query->condition('u.status', 1);
  $query->condition('city.bundle', 'user');
  $query->condition('country.bundle', 'city');
  $query->condition('country.field_country_target_id', $tid);
  $query->range(0, 6);

  return $query->execute()->fetchCol();
}

/**
 * Get most popular giudes by city.
 *
 * @param int $tid.
 * @return array.
 */
function excur_popular_giudes_in_city($tid) {
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->join('field_data_field_city', 'city', 'u.uid = city.entity_id');
  $query->condition('u.status', 1);
  $query->condition('city.bundle', 'user');
  $query->condition('city.field_city_target_id', $tid);
  $query->range(0, 6);

  return $query->execute()->fetchCol();
}

/**
 * Language switcher form.
 */
function excur_language_switcher() {
  $options = array();
  $data_content = array();

  foreach (language_list() as $lang) {
    if ($lang->enabled) {
      $url = url(current_path(), array('language' => $lang, 'absolute' => TRUE));
      $options[$url] = $lang->native;
      $langcode = explode('-', $lang->prefix);
      $data_content[$url] = '<i class=\'flag flag-' . reset($langcode) . '\'></i>' . $lang->native;
    }
  }

  $form['languages'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => url(current_path(), array('absolute' => TRUE)),
    '#data-content' => $data_content,
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == "views-exposed-form-content-city-service"
    || $form['#id'] == "views-exposed-form-content-guide-service") {

    $form['submit']['#attributes']['class'][] = 'btn';
    $form['field_languages_tid']['#attributes']['title'] = t('Use all languages');
  }
}

/**
 * Get categories of all services in city.
 *
 * @param int $nid.
 * @return array.
 */
function excur_categories_by_city($city) {
  global $language;

  $query = db_select('field_data_name_field', 'name');
  $query->fields('name', array('entity_id', 'name_field_value'));
  $query->join('field_data_field_category', 'category', 'name.entity_id = category.field_category_tid');
  $query->join('field_data_field_city', 'city', 'city.entity_id = category.entity_id');
  $query->condition('name.bundle', 'category');
  $query->condition('name.language', $language->language);
  $query->condition('city.field_city_target_id', $city);

  return $query->execute()->fetchAll();
}
