<?php

/**
 * @file.
 */

define('EXCUR_OFFER_NOT_CONFIRMED', 'not_confirmed');
define('EXCUR_OFFER_CONFIRMED', 'confirmed');
define('EXCUR_OFFER_REJECTED', 'rejected');

// Include additional files.
require_once 'excur_offer.mail.inc';

/**
 * Implements hook_menu().
 */
function excur_offer_menu() {
  $items['excur/offer/%excur_offer'] = array(
    'title' => 'E-ticket',
    'page callback' => 'excur_offer_page',
    'page arguments' => array(2),
    'access callback' => 'excur_offer_page_access',
    'access arguments' => array(2),
  );
  $items['excur/offer/confirm/%excur_offer'] = array(
    'title' => 'confirmed',
    'page callback' => 'excur_offer_confirmed',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
  $items['excur/offer/reject/%excur_offer'] = array(
    'title' => 'confirmed',
    'page callback' => 'excur_offer_rejected',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
    $items['excur/offer/order/%node'] = array(
    'title' => 'order',
    'page callback' => 'excur_offer_order',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
  $items['excur/offer/pay/%node'] = array(
    'title' => 'order_pay',
    'page callback' => 'excur_offer_pay',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
  $items['excur/special-offer/%node'] = array(
    'title' => 'order_pay',
    'page callback' => 'excur_offer_special_offer',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );
  $items['excur/companion/message/%node'] = array(
    'title' => 'Companion message',
    'page callback' => 'excur_offer_companion_message',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implement hook_theme().
 */
function excur_offer_theme() {
  $items['excur_offer_offer_form'] = array(
    'template' => 'theme/offer-form',
    'render element' => 'form',
  );

  $items['offer_pdf'] = array(
    'file' => 'theme.inc',
    'path' => drupal_get_path('module', 'excur_offer') . '/theme',
    'variables' => array(
      'offer' => NULL,
    ),
    'template' => 'offer-pdf',
  );

  $items['order_template'] = array(
    'template' => 'order-template',
  );

  $items['order_form'] = array(
    'render element' => 'form',
    'template' => 'order-form',
  );

  $items['pay_template'] = array(
    'template' => 'pay-template',
  );
  $items['time'] = array(
    'arguments' => array('element' => null)
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function excur_offer_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Access callback to offer pages.
 */
function excur_offer_page_access($offer) {
  global $user;

  if ($offer->uid == $user->uid
    || $user->uid == 1
    || (!empty($_GET['hash']) && $_GET['hash'] == md5(serialize($offer)))) {

    return TRUE;
  }

  return FALSE;
}

/**
 * Page callback for excur/offer/%excur_offer path.
 */
function excur_offer_confirmed($offer) {
  excur_offer_update($offer->id, 'status', EXCUR_OFFER_CONFIRMED);
  $account = user_load($offer->uid);
  $message = theme('offer_mail', array(
    'offer' => $offer,
  ));
  excur_offer_send_mail($account->mail, $message);
  print "<div class='order-card-status-inner-confirm'>". t('Confirmed')."</div>";
  drupal_exit();
}

/**
 * Page callback for excur/offer/reject/%excur_offer
 */
function excur_offer_rejected($offer) {
  excur_offer_update($offer->id, 'status', EXCUR_OFFER_REJECTED);
  $account = user_load($offer->uid);
  $message = t('Guide has rejected your order.');
  excur_offer_send_mail($account->mail, $message);
  print "<div class='order-card-status-inner-confirm'>".t('Rejected')."</div>";
  drupal_exit();
}

/**
 * Page callback for excur/offer/%excur_offer path.
 */
function excur_offer_page($offer) {
  $html = theme('offer_pdf', array('offer' => $offer));
  $error = FALSE;

  if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
    $pdf = new WkHtmlToPdf;
    $file_path = file_directory_temp() . '/' . time() . '.html';
    if (file_put_contents($file_path, $html)) {
      $pdf->addPage($file_path);
      if (!$pdf->send("order-$offer->id.pdf")) {
        $error = TRUE;
      }
      unlink($file_path);
    }
    else {
      $error = TRUE;
    }
  }
  else {
    $error = TRUE;
  }

  if ($error) {
    print $html;
  }

  drupal_exit();
}

/**
 * Page callback for excur/offer/%order.
 */
function excur_offer_order($order) {
  if (!empty($_GET['id']) && is_numeric($_GET['id'])) {
    return theme('order_template', array('order' => $order));
  }
  else {
    drupal_not_found();
    drupal_exit();
  }
}


/**
 * Page callback for excur/offer/%pay.
 */
function excur_offer_pay($pay) {
  return theme('pay_template', array('pay' => $pay));
}

/**
 * Form builder for offer form.
 */
function excur_offer_offer_form($form, &$form_state, $offer) {
  $form_state['#data'] = $offer;
  $form['#data'] = $offer;

  foreach ($offer['tickets'] as $key => $ticket) {
    $options[(string) $key] = $ticket['title'] . ' (' . $ticket['price'] . ' ' . $offer['currency'] . ')';
  }
  $form['tickets'] = array(
    '#type' => 'radios',
    '#options' => $options,
  );

  $form['date'] = array(
    '#title' => t('Ð¡hoose a date'),
    '#type' => 'date_popup',
    '#default_value' => date('Y-m-d'),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-0:+1',
    '#date_label_position' => 'within',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve'),
    '#attributes' => array(
      'class' => array('btn'),
    ),
  );
  $form['#submit'][] = 'excur_offer_offer_form_submit';
  $form['#validate'][] = 'excur_offer_offer_form_validate';

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_offer_form_privatemsg_new_alter(&$form, &$form_state) {
  global $user;

  if (isset($user->roles[EXCUR_USER_ROLE_GUIDE_ID])) {
    $thread = privatemsg_thread_load($form['thread_id']['#value']);
    foreach ($thread['participants'] as $account) {
      if ($account->uid != $user->uid) {
        break;
      }
    }
    $form['actions']['special_offer']['#markup'] = l(t('Special offer'), 'node/add/special-offer', array(
      'query' => array(
        'user' => $account->uid,
        'thread' => $form['thread_id']['#value'],
        'destination' => current_path(),
      )
    ));
    $form['actions']['special_offer']['#weight'] = 50;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function excur_offer_form_special_offer_node_form_alter(&$form, &$form_state) {
  global $user;

  $text = t('Meeting date');
  $required = ' <span class="form-required" title="' . t('This field is required.') . '">*</span>';
  $form['field_start_date']['#prefix'] = '<label for="edit-field-start-date-und-0-value-datepicker-popup-0">' . $text . $required . '</label>';

  if (!empty($_GET['user']) && is_numeric($_GET['user'])) {
    $form['field_user'][LANGUAGE_NONE]['#value'] = $_GET['user'];
    $form['field_guide'][LANGUAGE_NONE]['#value'] = $user->uid;
    $form['field_user']['#prefix'] = '<div class="element-hidden">';
    $form['field_user']['#suffix'] = '</div>';
    $form['field_guide']['#prefix'] = '<div class="element-hidden">';
    $form['field_guide']['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_node_presave().
 */
function excur_offer_node_insert($node) {
  global $user;

  if ($node->type == 'special_offer') {
    $thread = privatemsg_thread_load($_GET['thread']);
    $message = new StdClass();
    $message->body = t('Special offer to you. You can pay for it at !this_page.', array(
      '!this_page' => l(t('this page'), 'excur/special-offer/' . $node->nid),
    ));
    $message->subject = $thread['subject'];
    $recipient = new StdClass();
    $recipient->type = 'user';
    $recipient->recipient = $_GET['user'];
    $message->recipients = array($recipient);
    $message->author = $user;
    $message->timestamp = REQUEST_TIME;
    $message->format = 'filtered_html';
    $message->has_token = FALSE;
    $message->thread_id = $thread['thread_id'];
    _privatemsg_send($message);
  }
}

/**
 * Form builder for offer form.
 */
function excur_offer_pay_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay'),
    '#attributes' => array(
      'class' => array('btn', 'btnpay'),
    ),
  );

  return $form;
}

/**
 * Form builder for order form.
 */
function excur_offer_order_form($form, $form_state, $order) {
  global $user;

  $options_languages = array();
  $node = node_load($order->nid);
  $start_place = $node->field_start_place['ru'][0]['value'];
  $start_time = $node->field_start_time['ru'][0]['value'];
  $private_place = !empty($order->field_private_place)
    ? $order->field_private_place[LANGUAGE_NONE][0]['value']
    : 0;
  $private_time = !empty($order->field_private_time)
    ? $order->field_private_time[LANGUAGE_NONE][0]['value']
    : 0;
  $language_list = $order->field_languages[LANGUAGE_NONE];
  $data_content = array();

  foreach ($language_list as $key => $tid) {
    $lang = taxonomy_term_load($tid['tid']);
    $options_languages[$key] = $lang->name;
  }

  if ($private_time == 1) {
    $form['time'] = array(
      '#type'	=> 'textfield',
      '#default_value' => $start_time,
      '#title' => t('Start time'),
    );
  }

  elseif($private_time == 0){
    $form['time'] = array(
      '#type'	=> 'textfield',
      '#title' => t('Start time'),
      '#default_value' => $start_time,
      '#attributes' => array(
        'disabled' => 'disabled',
      )
    );
  }

  if ($private_place == 1) {
    $form['venue'] = array(
      '#type'	=> 'textfield',
      '#default_value' => $start_place,
      '#title' => t('Meeting point'),
    );
  }
  elseif ($private_place == 0) {
    $form['venue'] = array(
      '#type'	=> 'textfield',
      '#title' => t('Meeting point'),
      '#default_value' => $start_place,
      '#attributes' => array(
        'disabled' => 'disabled',
      ),
    );
  }

  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => $options_languages,
    '#default_value' => url(current_path(), array('absolute' => TRUE)),
    '#data-content' => $data_content,
  );
  $form['name'] = array(
    '#type'	=> 'textfield',
    '#title' => t('Name'),
    '#default_value' => $user->name,
    '#required' => TRUE,
  );
  $form['email'] = array(
    '#type'	=> 'textfield',
    '#title' => t('E-mail'),
    '#default_value' => $user->mail,
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type'	=> 'textfield',
    '#title' => t('Phone'),
    '#required' => TRUE,
  );
  $form['tourist_name'] = array(
    '#type'	=> 'textfield',
    '#title' => t('Name'),
    '#default_value' => $user->name,
    '#required' => TRUE,
  );
  $form['tourist_email'] = array(
    '#type'	=> 'textfield',
    '#title' => t('E-mail'),
    '#default_value' => $user->mail,
    '#required' => TRUE,
  );
  $form['tourist_phone'] = array(
    '#type'	=> 'textfield',
    '#title' => t('Phone'),
    '#required' => TRUE,
  );
  $form['companion'] = array(
    '#type'	=> 'checkbox',
    '#title' => t('seeking a companion'),
    '#description' => t('seeking a companion'),
    '#required' => FALSE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Reserve'),
    '#attributes' => array(
      'class' => array('btn','order-template-btn'),
    ),
  );

  $form['#theme'][] = 'order_form';
  $form['#submit'][] = 'excur_offer_order_form_submit';
  $form['#validate'][] = 'excur_offer_order_form_validate';

  return $form;
}

/**
 * Validate callback for excur_offer_order_form() form.
 */
function excur_offer_order_form_validate(&$form, &$form_state) {
  if (!$form['venue']['#value']) {
    form_error($form['venue'], t('Specify the location of the meeting'));
  }
}

/**
 * Submit callback for excur_offer_order_form() form.
 */
function excur_offer_order_form_submit(&$form, &$form_state) {
  global $language;
  $id = (int) $_GET['id'];
  $nid = excur_offer_load($id)->nid;

  foreach ($form['language']['#options'] as $key => $value) {
    if ($form['language']['#value'] == $key) {
      $lang = $form['language']['#options'][$key];
    }
  }

  $name = $form['name']['#value'];
  $email = $form['email']['#value'];
  $phone = $form['phone']['#value'];
  $tourist_name = $form['tourist_name']['#value'];
  $tourist_email = $form['tourist_email']['#value'];
  $tourist_phone = $form['tourist_phone']['#value'];
  $venue = $form['venue']['#value'];
  $node = node_load($nid);
  $reservation = entity_metadata_wrapper('node', $node);
  $reservation -> language($language->language);
  $companion = $form['companion']['#value'];
  if ($node->type == 'service') {
    $reservation = $reservation->field_reservation->value();
  }
  else {
    $reservation = 0;
  }

  $value_update = array(
    'language' => $lang,
    'status' => EXCUR_OFFER_NOT_CONFIRMED,
    'name' => $name,
    'email' => $email,
    'phone' => $phone,
    'tourist_name' => $tourist_name,
    'tourist_email' => $tourist_email,
    'tourist_phone' => $tourist_phone,
    'venue' => $venue,
    'companion' => $companion,
  );

  if ($reservation == 1) {
    foreach ($value_update as $label => $value) {
      excur_offer_update($id, $label, $value);
    }

    drupal_goto('node/' . $nid);
    drupal_set_message(t('Application for reservation successfully sent Pending guide.'));
  }
  else {
    $value_update['status'] = EXCUR_OFFER_CONFIRMED;
    foreach ($value_update as $label => $value) {
      excur_offer_update($id, $label, $value);
    }

    drupal_goto("excur/offer/pay/$nid", array('query' => array('id' => $id)));
  }
}

/**
 * Validate callback for excur_offer_offer_form() form.
 */
function excur_offer_offer_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];
  if (!$values['tickets']) {
    form_error($form['tickets'], t('You should choose a price.'));
  }
  if (!$values['date'] || strtotime($values['date']) < REQUEST_TIME) {
    form_error($form['date'], t('You should choose a valid date.'));
  }
}

/**
 * Submit callback for excur_offer_offer_form() form.
 */
function excur_offer_offer_form_submit(&$form, &$form_state) {
  global $user;

  $values = $form_state['values'];
  $nid = $form['#data']['nid'];
  $node = node_load($nid);
  $start_place = $node->field_start_place['ru'][0]['value'];
  $start_time = $node->field_start_time['ru'][0]['value'];
  $duration = $form['#data']['duration'];
  $type_offer = $form['#data']['title'];
  foreach($form['#data']['tickets'] as $key=>$value){
    if($values['tickets']== $key){
      $ticket_type = $value['title'];
    }
  }

  $lang = 0;
  $oid = rand(1000, 9999) . REQUEST_TIME;
  $id = excur_offer_save($oid, $user->uid, $form['#data']['nid'], $values['tickets'], excur_offer_user_currency(), strtotime($values['date']), 0, $lang, $type_offer, $ticket_type, $duration, 0, 0, 0, 0, 0, 0, $start_place, $start_time, 0);
  drupal_goto('excur/offer/order/' . $nid, array('query' => array('id' => $id)));
}

/**
 * Send html mail.
 */
function excur_offer_send_mail($email, $message, $subject = NULL, $module_key = NULL) {
  $subject = $subject
    ? $subject
    : t('Ð£Ð²ÐµÐ´Ð¾Ð¼Ð»ÐµÐ½Ð¸Ðµ Ð¾Ñ ÑÐ°Ð¹ÑÐ° "!site"', array('!site' => variable_get('site_name')));

  $module = 'excur_offer';
  $module_key = $module_key ? $module_key : 'offer_mail';
  $from = variable_get('site_mail');
  $message = array(
    'id' => $module . '_' . $module_key,
    'to' => $email,
    'subject' => $subject,
    'body' => array($message),
    'from' => $from,
    'headers' => array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal',
      'From' => $from,
      'Sender' => $from,
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system($module, $module_key);
  $message = $system->format($message);

  return $system->mail($message);
}

/**
 * Load offer.
 *
 * @param int $oid.
 * @return object.
 */
function excur_offer_load($id) {
  return db_select('excur_offer', 'eo')
    ->fields('eo')
    ->condition('id', $id)
    ->execute()
    ->fetchObject();
}

/**
 * Save offer.
 */
function excur_offer_save($oid, $uid, $nid, $ticket, $currency, $date, $status, $language, $offer, $ticket_type, $duration, $name, $email, $phone, $tourist_name, $tourist_email, $tourist_phone,$venue, $start_time, $companion) {
  $record = array(
    'oid' => $oid,
    'uid' => $uid,
    'nid' => $nid,
    'date' => $date,
    'ticket' => $ticket,
    'currency' => $currency,
    'created' => REQUEST_TIME,
    'status' => $status,
    'language' => $language,
    'offer' => $offer,
    'ticket_type' => $ticket_type,
    'duration' => $duration,
    'name' => $name,
    'email' => $email,
    'phone' => $phone,
    'tourist_name' => $tourist_name,
    'tourist_email' => $tourist_email,
    'tourist_phone' => $tourist_phone,
    'venue' => $venue,
    'start_time' => $start_time,
    'companion' => $companion,
  );

  $id = db_insert('excur_offer')
    ->fields($record)
    ->execute();
  return $id;
}

/**
 * Update offer by oid.
 *
 * @param int $oid.
 * @param string $label.
 * @param mixed $value.
 */
function excur_offer_update($id, $label, $value) {
  db_update('excur_offer')
    ->fields(array($label => $value))
    ->condition('id', $id)
    ->execute();
}

/**
 * Get service duration of offer by price.
 *
 * @param float $price.
 * @param int $nid.
 * @return string.
 */
function excur_offer_duration_by_price($price, $nid) {
  global $language;

  $query = db_select('field_data_field_offer_duration', 'duration');
  $query->fields('duration', array('field_offer_duration_value'));
  $query->join('field_data_field_offer', 'offer', 'offer.field_offer_value = duration.entity_id');
  $query->join('field_data_field_offer_ticket', 'ticket', 'offer.field_offer_value = ticket.entity_id');
  $query->join('field_data_field_offer_ticket_price', 'ticket_price', 'ticket.field_offer_ticket_value = ticket_price.entity_id');
  $query->condition('offer.entity_id', $nid);
  $query->condition('ticket_price.field_offer_ticket_price_value', $price);
  $query->condition('duration.language', $language->language);

  return $query->execute()->fetchField();
}

/**
 * Check if user ordered service of current guide.
 */
function excur_offer_is_user_ordered($guide_uid, $uid = NULL) {
  global $user;
  $uid = $uid ? $uid : $user->uid;

  $query = db_select('excur_offer', 'eo');
  $query->join('field_data_field_guide', 'fdfg', 'fdfg.entity_id = eo.nid');
  $query->fields('eo', array('uid'));
  $query->condition('eo.uid', $uid);
  $query->condition('fdfg.field_guide_target_id', $guide_uid);
  $query->range(0, 1);

  return (bool) $query->execute()->fetchField();
}

/**
 * Generate link to pdf version of offer.
 *
 * @param string $title
 * @param object $offer
 * @return string
 */
function excur_offer_pdf_link($title, $offer) {
  $hash = md5(serialize($offer));

  return l(t($title), "excur/offer/$offer->id", array(
    'query' => array(
      'hash' => $hash,
    ),
  ));
}

/**
 * Page callback for 'excur/special-offer/%node' path.
 */
function excur_offer_special_offer($node) {
  global $user;
  global $language;

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->language($language->language);
  $start_place = $wrapper->field_start_place->value();
  $start_time = $wrapper->field_start_time->value();
  $duration = $wrapper->field_duration->value();
  $price = $wrapper->field_price->value();
  $date = strtotime($wrapper->field_start_date->value());
  $type_offer = t('Special offer');

  $oid = rand(1000, 9999) . REQUEST_TIME;
  $id = excur_offer_save($oid, $user->uid, $node->nid, $price, excur_offer_user_currency(), $date, 0, 0, $type_offer, $type_offer, $duration, 0, 0, 0, 0, 0, 0, $start_place, $start_time);
  drupal_goto('excur/offer/order/' . $node->nid, array('query' => array('id' => $id)));
}

/**
 * Page callback for 'excur/companion/message/%node' path.
 */
function excur_offer_companion_message($node) {
  global $user;

  $thread = privatemsg_thread_load($_GET['thread']);
  $message = new StdClass();
  $message->body = t('Special offer to you. You can pay for it at !this_page.');
  $message->subject = $thread['subject'];
  $recipient = new StdClass();
  $recipient->type = 'user';
  $recipient->recipient = $_GET['user'];
  $message->recipients = array($recipient);
  $message->author = $user;
  $message->timestamp = REQUEST_TIME;
  $message->format = 'filtered_html';
  $message->has_token = FALSE;
  $message->thread_id = $thread['thread_id'];
  _privatemsg_send($message);
}
